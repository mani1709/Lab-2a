import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class Main {
	
	public static void main(String[] args) throws IOException {
		String outputFile = "";
		Vec3 backgroundColor = new Vec3(0, 0, 0);
		
		Vec3 position = new Vec3(0, 0, 0);
		Vec3 lookAt = new Vec3(0, 0, 0);
		Vec3 up = new Vec3(0, 0, 0);
		
		double fovx = 0;
		double fovy = 0;
		
		int width = 0;
	    int height = 0;
	    
	    int maxBounces = 0;
	    
	    List<Light> lights = new ArrayList<Light>();
	    
	    List<Obj> objects = new ArrayList<Obj>();
	    
	    //parsing xml document
	    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse(args[0]);
	    
			XMLParsing x = new XMLParsing(document);
	    
			outputFile = x.parseOutputFile();
			backgroundColor = x.parseBackgroundColor();
			position = x.parsePositionCamera();
			lookAt = x.parseLookAt();
			up = x.parseUp();
			fovx = x.parseHorizontalFov();
			width = x.parseWidth();
			height = x.parseHeight();
			fovy = height/width*fovx;
			maxBounces = x.parseMaxBounces();
			//CHANGE FOVX AND FOVY
			
			System.out.println(height);
			
			
			
			//parse camera
			Node cameras = document.getElementsByTagName("camera").item(0);
			Element camera = (Element) cameras;
			NodeList cameraStats = camera.getChildNodes();
			for(int i = 0; i < cameraStats.getLength(); i++) {
				Node n = cameraStats.item(i);
				if(n.getNodeType() == Node.ELEMENT_NODE) {
					Element stat = (Element) n;
					switch(stat.getTagName()) {
						case "position":
							position = new Vec3(Double.parseDouble(stat.getAttribute("x")), Double.parseDouble(stat.getAttribute("y")), Double.parseDouble(stat.getAttribute("z")));
							break;
						case "lookat":
							lookAt = new Vec3(Double.parseDouble(stat.getAttribute("x")), Double.parseDouble(stat.getAttribute("y")), Double.parseDouble(stat.getAttribute("z")));
							break;
						case "up":
							up = new Vec3(Double.parseDouble(stat.getAttribute("x")), Double.parseDouble(stat.getAttribute("y")), Double.parseDouble(stat.getAttribute("z")));
							break;
						case "horizontal_fov":
							fovx = Math.toRadians(Double.parseDouble(stat.getAttribute("angle")));
							break;
						case "resolution":
							width = Integer.parseInt(stat.getAttribute("horizontal"));
							height = Integer.parseInt(stat.getAttribute("vertical"));
							fovy = height/width*fovx;
							break;
						case "max_bounces":
							maxBounces = Integer.parseInt(stat.getAttribute("n"));
							break;
					}
				}
			}
			
			//parse lights
			NodeList ambientLights = document.getElementsByTagName("ambient_light");
			for(int i = 0; i < ambientLights.getLength(); i++) {
				Node ambientLight = ambientLights.item(i);
				Element l = (Element) ambientLight;
				if(l.getNodeType() == Node.ELEMENT_NODE) {
					NodeList lightStats = l.getChildNodes();
					Vec3 c = new Vec3(0, 0, 0);
					for(int j = 0; j < lightStats.getLength(); j++) {
						Node s = lightStats.item(j);
						if(s.getNodeType() == Node.ELEMENT_NODE) {
							Element stat = (Element) s;
							if(stat.getNodeName() == "color") {
								c = new Vec3(Double.parseDouble(stat.getAttribute("r")), Double.parseDouble(stat.getAttribute("g")), Double.parseDouble(stat.getAttribute("b")));
							}
						}
					}
					lights.add(new AmbientLight(c));
				}
			}
			
			NodeList parallelLights = document.getElementsByTagName("parallel_light");
			for(int i = 0; i < parallelLights.getLength(); i++) {
				Node parallelLight = parallelLights.item(i);
				Element l = (Element) parallelLight;
				if(l.getNodeType() == Node.ELEMENT_NODE) {
					NodeList lightStats = l.getChildNodes();
					Vec3 c = new Vec3(0, 0, 0);
					Vec3 p = new Vec3(0, 0, 0);
					for(int j = 0; j < lightStats.getLength(); j++) {
						Node s = lightStats.item(j);
						if(s.getNodeType() == Node.ELEMENT_NODE) {
							Element stat = (Element) s;
							if(stat.getNodeName() == "color") {
								c = new Vec3(Double.parseDouble(stat.getAttribute("r")), Double.parseDouble(stat.getAttribute("g")), Double.parseDouble(stat.getAttribute("b")));
							} else if(stat.getNodeName() == "direction") {
								p = new Vec3(Double.parseDouble(stat.getAttribute("x")), Double.parseDouble(stat.getAttribute("y")), Double.parseDouble(stat.getAttribute("z")));
							}
							
						}
					}
					lights.add(new ParallelLight(c, p));
				}
			}
			
			NodeList pointLights = document.getElementsByTagName("point_light");
			for(int i = 0; i < pointLights.getLength(); i++) {
				Node pointLight = pointLights.item(i);
				Element l = (Element) pointLight;
				if(l.getNodeType() == Node.ELEMENT_NODE) {
					NodeList lightStats = l.getChildNodes();
					Vec3 c = new Vec3(0, 0, 0);
					Vec3 p = new Vec3(0, 0, 0);
					for(int j = 0; j < lightStats.getLength(); j++) {
						Node s = lightStats.item(j);
						if(s.getNodeType() == Node.ELEMENT_NODE) {
							Element stat = (Element) s;
							if(stat.getNodeName() == "color") {
								c = new Vec3(Double.parseDouble(stat.getAttribute("r")), Double.parseDouble(stat.getAttribute("g")), Double.parseDouble(stat.getAttribute("b")));
							} else if(stat.getNodeName() == "position") {
								p = new Vec3(Double.parseDouble(stat.getAttribute("x")), Double.parseDouble(stat.getAttribute("y")), Double.parseDouble(stat.getAttribute("z")));
							}
							
						}
					}
					lights.add(new PointLight(c, p));
				}
			}
			
			
			
			
			
			
			//parse surfaces
			NodeList sphereList = document.getElementsByTagName("sphere");
			for(int i = 0; i < sphereList.getLength(); i++) {
				
				Double radius = 0.0;
				Vec3 pos = new Vec3(0, 0, 0);
				Vec3 color = new Vec3(0, 0, 0);
				Double ka = 0.0;
				Double kd = 0.0;
				Double ks = 0.0;
				int exponent = 0;
				Double reflectance = 0.0;
				Double transmittance = 0.0;
				Double refraction = 0.0;
				
				Material material = new MaterialSolid(new Vec3(0, 0, 0), 0, 0, 0, 0, 0, 0, 0);
				
				Node s = sphereList.item(i);
				if(s.getNodeType() == Node.ELEMENT_NODE) {
					Element sphere = (Element) s;
					radius = Double.parseDouble(sphere.getAttribute("radius"));
					NodeList sphereStatList = sphere.getChildNodes();
					for(int j = 0; j < sphereStatList.getLength(); j++) {
						Node t = sphereStatList.item(j);
						if(t.getNodeType() == Node.ELEMENT_NODE) {
							Element sphereStat = (Element) t;
							if(sphereStat.getTagName() == "position") {
								pos = new Vec3(Double.parseDouble(sphereStat.getAttribute("x")), Double.parseDouble(sphereStat.getAttribute("y")), Double.parseDouble(sphereStat.getAttribute("z")));
							} else if(sphereStat.getTagName() == "material_solid") {
								NodeList materialStatList = sphereStat.getChildNodes();
								for(int k = 0; k < materialStatList.getLength(); k++) {
									Node u = materialStatList.item(k);
									if(u.getNodeType() == Node.ELEMENT_NODE) {
										Element materialStat = (Element) u;
										if(materialStat.getTagName() == "color") {
											color = new Vec3(Double.parseDouble(materialStat.getAttribute("r")), Double.parseDouble(materialStat.getAttribute("g")), Double.parseDouble(materialStat.getAttribute("b")));
										} else if (materialStat.getTagName() == "phong") {
											ka = Double.parseDouble(materialStat.getAttribute("ka"));
											kd = Double.parseDouble(materialStat.getAttribute("kd"));
											ks = Double.parseDouble(materialStat.getAttribute("ks"));
											exponent = Integer.parseInt(materialStat.getAttribute("exponent"));
										} else if (materialStat.getTagName() == "reflectance") {
											reflectance = Double.parseDouble(materialStat.getAttribute("r"));
										} else if (materialStat.getTagName() == "transmittance") {
											transmittance = Double.parseDouble(materialStat.getAttribute("t"));
										} else if (materialStat.getTagName() == "refraction") {
											refraction = Double.parseDouble(materialStat.getAttribute("iof"));
										}
									}
								}
							}
						}
					}
				}
				material = new MaterialSolid(color, ka, kd, ks, exponent, reflectance, transmittance, refraction);
				
				objects.add(new Sphere(radius, pos, material));
			}
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		}
		
	    //creation of image
		BufferedImage canvas = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		Camera camera = new Camera(position, up, lookAt, width, height, fovx);
		
		double differenceWidth = camera.getRight() - camera.getLeft();
		double differenceHeight = camera.getBottom() - camera.getTop();
		
        for(int i = 0; i < width; i++) {
        	for(int j = 0; j < height; j++) {
        		//u and v are the values of the plane from -width/2 to width/2 changing by 1 per value for u and the same as height for v
        		double u = camera.getLeft() + (differenceWidth) * (i + 0.5)/width; //((2*i - width) / width) * Math.tan(fovx); //camera.getLeft() + (differenceWidth) * (i + 0.5)/width;
        		double v = camera.getTop() + (differenceHeight) * (j + 0.5)/height; //((2*j - height) / height) * Math.tan(fovy); //camera.getTop() + (differenceHeight) * (j + 0.5)/height;
        		
        		
        		Vec3 uScaled = Utils.multScalar(camera.getU(), u);
        		Vec3 vScaled = Utils.multScalar(camera.getV(), v);
        		Vec3 vectorToPlane = Utils.add(Utils.add(uScaled, vScaled), camera.getW_distance_negated());
        		Vec3 direction = Utils.normalize(vectorToPlane);
        		
        		Ray ray = new Ray(position, direction);
        		
        		Obj intersect = null;
        		double tNearestObject = Double.MAX_VALUE;

        		for(int k = 0; k < objects.size(); k++) {
        			double tCuttingObject = objects.get(k).intersect(ray);
        			if(tCuttingObject > 0 && tCuttingObject < tNearestObject) {
        				intersect = objects.get(k);
        				tNearestObject = tCuttingObject;
        			}
        		}
        		
        		if(intersect == null) {
        			int r = (int) (backgroundColor.getX() * 256);
            		int g = (int) (backgroundColor.getY() * 256);
            		int b = (int) (backgroundColor.getZ() * 256);
            		Color color = new Color(r, g, b);
            		canvas.setRGB(i, j, color.getRGB());
        		} else {
        			Vec3 c = intersect.getColor();
        			int r = (int) (c.getX() * lights.get(0).getColor().getX() * intersect.getMaterial().getColor().getX() * 256);
        			int g = (int) (c.getY() * lights.get(0).getColor().getY() * intersect.getMaterial().getColor().getY() * 256);
        			int b = (int) (c.getZ() * lights.get(0).getColor().getZ() * intersect.getMaterial().getColor().getZ() * 256);
        			Color color = new Color(r, g, b);
        			
        			
        			
            		canvas.setRGB(i, j, color.getRGB());
        		}
        	}
        }
        
        BufferedImage canvas2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        for(int i = 0; i < width; i++) {
        	for(int j = 0; j < height; j++) {
        		canvas2.setRGB(i, j, canvas.getRGB(width - i - 1, j));
        	}
        }
        
        //write array to image
        File file = new File(outputFile);
        ImageIO.write(canvas2, "png", file);
	}
}
