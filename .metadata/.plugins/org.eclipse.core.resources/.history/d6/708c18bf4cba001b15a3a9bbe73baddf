public class Utils {
	//if we dont want the vectors to change, we can use this class to create a new vector from the return
	//also used for dot and cross product
	
	public static Vec3 add(Vec3 a, Vec3 b) {
		double x = a.x + b.x;
		double y = a.y + b.y;
		double z = a.z + b.z;
		return new Vec3(x, y, z);
	}
	
	public static Vec3 subtract(Vec3 a, Vec3 b) {
		double x = a.x - b.x;
		double y = a.y - b.y;
		double z = a.z - b.z;
		return new Vec3(x, y, z);
	}
	
	public static Vec3 multScalar(Vec3 a, double t) {
		return new Vec3(t * a.x, t* a.y, t*a.z);
	}
	
	public static double dotProduct(Vec3 a, Vec3 b) {
		return a.x * b.x + a.y * b.y + a.z * b.z;
	}
	
	public static Vec3 crossProduct (Vec3 a, Vec3 b) {
		double x = a.y*b.z - a.z*b.y;
		double y = a.z*b.x - a.x*b.z;
		double z = a.x*b.y - a.y*b.x;
		return new Vec3(x, y, z);
	}
	
	public static Vec3 normalize(Vec3 a) {
		double length = a.length();
		//care for Vector of length 0, since we cant divide through 0
		if (length != 0) {
			return new Vec3(a.x/length, a.y/length, a.z/length);
		} else {
			return new Vec3(0, 0, 0);
		}
	}
	public static Vector3D quadraticFormulaSolver(double a, double b, double c) {
		double discriminant = b * b - 4 * a * c;
		
		if(discriminant < 0) {
			
		} else if (discriminant = 0) {
			
		} else {
			
		}
		
		return
	}
}